<?php

$(macro :unsafe) {
    __get_value($(T_VARIABLE as source), $(T_VARIABLE as index), $(T_VARIABLE as result))
    $(optional(token(';')))
} >> {
    $(result) = $(source)->source[$(index)] ?? $[DefaultValue];
}

$(macro :unsafe) {
    __set_value($(T_VARIABLE as source), $(T_VARIABLE as index), $(T_VARIABLE as value))
    $(optional(token(';')))
} >> {
    $(source)->source[$(index)] = $(value);
    if ($(source)->elementCount < $(index) + 1) {
        $(source)->elementCount = $(index) + 1;
    }
}

$(macro :unsafe) {
    __unset_value($(T_VARIABLE as source), $(T_VARIABLE as index))
    $(optional(token(';')))
} >> {
    if ($(source)->elementCount - 1 === $index) {
        --$(source)->elementCount;
        unset($(source)->source[$(index)]);
    } else {
        $(source)->fillAndSort();
        \array_splice($(source)->source, $(index), 1);
        $(source)->source = \array_diff($(source)->source, [$[DefaultValue]]);
        --$(source)->elementCount;
        if (!isset($(source)->source[$(source)->elementCount - 1])) {
            $(source)->source[$(source)->elementCount - 1] = $[DefaultValue];
        }
    }
}

$(macro :unsafe) {
    __array_access_methods()
} >> {
    public function offsetExists($index)
    {
        return __expr_is_index($index);
    }
    
    public function offsetGet($index)
    {
        if (null === $index) {
            $index = $this->elementCount;
        } else __ensure_index($index);
        
        __get_value($this, $index, $value);
        return $value;
    }
    
    public function offsetSet($index, $value)
    {
        if (null === $index) {
            $index = $this->elementCount;
        } else __ensure_index($index);
        __ensure_value($value);
        
        __set_value($this, $index, $value);
    }
    
    public function offsetUnset($index)
    {
        if (__expr_is_index($index)) {
            __unset_value($this, $index);
        }
    }
    
    protected function fillAndSort(): void
    {
        if (\count($this->source) !== $this->elementCount) {
            $this->source += \array_fill(0, $this->elementCount, $[DefaultValue]);
        }
        \ksort($this->source, \SORT_NUMERIC);
    }
}
