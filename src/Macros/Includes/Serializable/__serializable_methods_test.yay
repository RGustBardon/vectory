<?php

$(macro :unsafe) {
    __serializable_methods_test()
    $(_() as __context_AffectedByEndianness)
} >> function (\Yay\Ast $ast, \Yay\TokenStream $ts, \Yay\Index $start, \Yay\Index $end, \Yay\Engine $engine) {
    if (Vectory::isInteger() && Vectory::isSigned() && \in_array(Vectory::getBytesperElement(), [2, 4, 8], true)) {
        $append = new \Yay\Ast('__context_AffectedByEndianness');
        $append->push(new \Yay\Ast());
        $ast->append($append);
    }
} >> {
    public static function corruptedSerializationProvider(): \Generator
    {
        yield from [
            [\UnexpectedValueException::class, '~(?<=\\{)a(?=:)~', 'x'],
            [\TypeError::class, '~(?<=\\{i:0;)i(?=:[0-9]+)~', 'b'],
            [\UnexpectedValueException::class, '~(?<=\\{i:0;i:)[0-9]+~', '-1'],
            $<Nullable>{
                [\LengthException::class, '~(?<=s:)0:"(?=";i:[0-9]+;s:0:"";\}\}$)~', "1:\"\0"],
            }
            [\LengthException::class, '~(?<=s:)0:"(?=";\}\}$)~', "1:\"\0"],
            $<Nullable>{
                [\DomainException::class, '~(?<=i:)0(?=;(i:[0-9]+;s:0:"";){2}\}\}$)~', '-1'],
            }
            $<!Nullable>{
                [\DomainException::class, '~(?<=i:)0(?=;i:[0-9]+;s:0:"";\}\}$)~', '-1'],
            }
        ];
    }
    
    /**
     * @dataProvider corruptedSerializationProvider
     */
    public function testThrowsIfUnserializesCorrupted(
        string $expectedException,
        string $pattern,
        string $replacement
    ): void
    {
        $this->expectException($expectedException);
        
        $serialized = \serialize(self::getInstance());
        $serialized = (string) \preg_replace($pattern, $replacement, $serialized, 1);
        \preg_match('~^(C:[0-9]+:[^:]+:)([0-9]+)(.*)~', $serialized, $match);
        $serialized = $match[1].(\strlen($match[3]) - \strlen(':{}')).$match[3];
        self::unserializeVector($serialized);
    }
    
    /**
     * @depends testArrayAccess
     * @depends testCountable
     * @depends testIteratorAggregate
     */
    public function testSerializable(): void
    {
        $vector = self::getInstance();
        self::assertSerialization([], \serialize($vector));
        
        $value = self::getRandomValue();
        $sequence = [$value, self::getRandomValue(), $value];
        foreach ($sequence as $value) {
            $vector[] = $value;
        }
        $vector[4] = $[DefaultValue];
        \array_push($sequence, $[DefaultValue], $[DefaultValue]);
        self::assertSerialization($sequence, \serialize($vector));
    }
    
    $( __context_AffectedByEndianness ? {
        /**
         * @depends testSerializable
         */
        public function testSerializableWithDifferentEndianness(): void
        {
            $vector = self::getInstance();
            $sequence = [
                self::getRandomValue(),
                self::getRandomValue(),
                $<Nullable>{ null, }
                $<!Nullable>{ $[DefaultValue], }
            ];
            foreach ($sequence as $value) {
                $vector[] = $value;
            }
            $serialized = \serialize($vector);
            
            $littleEndianPosition = \strpos($serialized, ';b:') + 3;
            $serialized[$littleEndianPosition] = (string) \abs(1 - (int) $serialized[$littleEndianPosition]);
            
            $primarySourcePosition = \strpos($serialized, ';s:') + 3;
            \preg_match('~[0-9]+~', $serialized, $matches, 0, $primarySourcePosition);
            $primarySourceLength = $matches[0];
            $primarySourcePosition += \strlen($primarySourceLength) + 2;
            $primarySource = \substr($serialized, $primarySourcePosition, (int) $primarySourceLength);
            $primarySourceReversed = '';
            foreach (\str_split($primarySource, $[BytesPerElement]) as $chunk) {
                $primarySourceReversed .= \strrev($chunk);
            }
            $serialized = \substr_replace($serialized, $primarySourceReversed, $primarySourcePosition, $primarySourceLength);
            
            self::assertSerialization($sequence, $serialized);
        }
    })
    
    private static function assertSerialization($expected, string $serialized): void
    {
        $actualUnserialized = self::unserializeVector($serialized);
        
        $actual = [];
        foreach ($actualUnserialized as $index => $element) {
            $actual[$index] = $element;
        }
        self::assertSame($expected, $actual);
    }
    
    private static function unserializeVector(string $serialized)
    {
        $unserialized = \unserialize(
            $serialized,
            ['allowed_classes' => [\ltrim($[FullyQualifiedClassName], '\\')]]
        );
        
        return $unserialized;
    }
}