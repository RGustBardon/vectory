<?php

$(macro :unsafe) {
    __serializable_methods()
} >> {
    private const SERIALIZATION_FORMAT_VERSION = 'v1.0.0';
    
    public function serialize(): string
    {
        return \serialize([                 
            $<Integer>{ \pack('S', 1) === \pack('v', 1), }
            $this->elementCount,
            $this->primarySource,
            $<Nullable>{ $this->nullabilitySource, }
        ]);
    }
    
    public function unserialize($serialized)
    {
        $errorMessage = 'Details unavailable';
        \set_error_handler(static function (int $errno, string $errstr) use (&$errorMessage): void {
            $errorMessage = $errstr;
        });
        $newValues = \unserialize($serialized, ['allowed_classes' => [\ltrim($[FullyQualifiedClassName], '\\')]]);
        \restore_error_handler();
        
        if (false === $newValues) {
            __throw(
                \UnexpectedValueException,
                \sprintf('Failed to unserialize (%s)', $errorMessage)
            );
        }
        
        $expectedTypes = ['integer', 'string'];
        $<Integer>{
            \array_unshift($expectedTypes, 'boolean');
        }
        $<Nullable>{
            \array_push($expectedTypes, 'string');
        }
            
        if (
            !\is_array($newValues)
            || \array_keys($newValues) !== \array_keys($expectedTypes)
            || \array_map('gettype', $newValues) !== $expectedTypes
        ) {
            $errorMessage = 'Expected an array of '.\implode(', ', $expectedTypes);
            __throw(
                \TypeError,
                \sprintf('Failed to unserialize (%s)', $errorMessage)
            );
        }
        
        $previousValues = [
            $this->elementCount,
            $this->primarySource,
            $<Nullable>{ $this->nullabilitySource, }
        ];
        
        [
            $<Integer>{ $littleEndian, }
            $this->elementCount,
            $this->primarySource,
            $<Nullable>{ $this->nullabilitySource, }
        ] = $newValues;
        
        try {
            if ($this->elementCount < 0) {
                $errorMessage = 'The element count must not be negative';
                __throw(
                    \DomainException,
                    \sprintf('Failed to unserialize (%s)', $errorMessage)
                );
            }
        } catch (\Throwable $e) {
            [
                $this->elementCount,
                $this->primarySource,
                $<Nullable>{ $this->nullabilitySource, }
            ] = $previousValues;
            throw $e;
        }
    }
}