<?php

$(macro :unsafe) {
    __throw_unexpected_value_type($(T_VARIABLE as value))
    $(optional(token(';')))
} >> {
    $$(expand(
        __throw(
            \TypeError,
            \sprintf(
                'Value must be of type %s%s, %s given',
                $[Type],
                $<Nullable>{ ' or null' } $<!Nullable>{ '' },
                \gettype($(value))
                )
            )
        )
    )
}
    
$(macro :unsafe) {
    __do_ensure_value($(T_VARIABLE as value))
    $(optional(token(';')))
} >> {
    $$(expand(
        $<Boolean>{
            if (!\is_bool($(value))) {
                __throw_unexpected_value_type($(value))
            }
        }
        $<Integer>{
            if (!\is_int($(value))) {
                __throw_unexpected_value_type($(value))
            }
            
            $<HasMinimumMaximum>{
                if ($(value) < $[MinimumValue] || $(value) > $[MaximumValue]) {
                    __throw(\OutOfRangeException, 'Value out of range: '.$(value).', expected '.($[MinimumValue]).' <= x <= '.($[MaximumValue]))
                }
            }
        }
        $<String>{
            if (!\is_string($(value))) {
                __throw_unexpected_value_type($(value))
            }
    
            if (\strlen($(value)) !== $[BytesPerElement]) {
                __throw(\LengthException, \sprintf('Value must be exactly %d bytes, %d given', $[BytesPerElement], \strlen($(value))))
            }
        }
    ))
}

$(macro :unsafe) {
    __ensure_value($(T_VARIABLE as value))
    $(optional(token(';')))
} >> {
    $$(expand($<Nullable>{
        if (null !== $value) {
            $$(expand(__do_ensure_value($(value))))
        }
    }))

    $$(expand($<!Nullable>{
        $$(expand(__do_ensure_value($(value))))
    }))
}