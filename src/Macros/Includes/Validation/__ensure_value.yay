<?php

$(macro :unsafe) {
    __throw_unexpected_value_type($(T_VARIABLE as value))
    $(optional(token(';')))
    $(_() as __context_NullableSuffix)
} >> function (\Yay\Ast $ast, \Yay\TokenStream $ts, \Yay\Index $start, \Yay\Index $end, \Yay\Engine $engine) {
    $token = new \Yay\Token(\T_CONSTANT_ENCAPSED_STRING, Vectory::isNullable() ? '" or null"': '""');
    $ast->append(new \Yay\Ast('__context_NullableSuffix', $token));
} >> {
    $$(expand(
        __throw(
            \TypeError,
            \sprintf(
                'Value must be of type %s%s, %s given',
                $[Type],
                $(__context_NullableSuffix),
                \gettype($(value))
                )
            )
        ))
}
    
$(macro :unsafe) {
    __do_ensure_value($(T_VARIABLE as value))
    $(optional(token(';')))
    $(_() as __context_HasMinimumMaximum)
    $(_() as __ensure_value_bool)
    $(_() as __ensure_value_int)
    $(_() as __ensure_value_string)
} >> function (\Yay\Ast $ast, \Yay\TokenStream $ts, \Yay\Index $start, \Yay\Index $end, \Yay\Engine $engine) {
    if ('int' === Vectory::getType() && Vectory::getBytesPerElement() < 8) {
        $append = new \Yay\Ast('__context_HasMinimumMaximum');
        $append->push(new \Yay\Ast());
        $ast->append($append);
    }
    
    $append = new \Yay\Ast('__ensure_value_'.Vectory::getType());
    $append->push(new \Yay\Ast());
    $ast->append($append);
} >> {
    $(__ensure_value_bool ? {
        if (!\is_bool($(value))) {
            $$(expand(__throw_unexpected_value_type($(value))))
        }
    })
    $(__ensure_value_int ? {
        if (!\is_int($(value))) {
            $$(expand(__throw_unexpected_value_type($(value))))
        }
        
        $(__context_HasMinimumMaximum ? {
            if ($(value) < $[MinimumValue] || $(value) > $[MaximumValue]) {
                $$(expand(__throw(\OutOfRangeException, 'Value out of range: '.$(value).', expected '.($[MinimumValue]).' <= x <= '.($[MaximumValue]))))
            }
        })
    })
    $(__ensure_value_string ? {
        if (!\is_string($(value))) {
            $$(expand(__throw_unexpected_value_type($(value))))
        }
        
        if (\strlen($(value)) !== $[BytesPerElement]) {
            $$(expand(__throw(\LengthException, \sprintf('Value must be exactly %d bytes, %d given', $[BytesPerElement], \strlen($(value))))))
        }
    })
}

$(macro :unsafe) {
    __ensure_value($(T_VARIABLE as value))
    $(optional(token(';')))
    $(_() as __context_Nullable)
} >> function (\Yay\Ast $ast, \Yay\TokenStream $ts, \Yay\Index $start, \Yay\Index $end, \Yay\Engine $engine) {
    if (Vectory::isNullable()) {
        $append = new \Yay\Ast('__context_Nullable');
        $append->push(new \Yay\Ast());
        $ast->append($append);
    }
} >> {
    $(__context_Nullable ! {
        $$(expand(__do_ensure_value($(value))))
    })
    
    $(__context_Nullable ? {
        if (null !== $value) {
            $$(expand(__do_ensure_value($(value))))
        }
    })
}