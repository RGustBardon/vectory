<?php

$(macro :unsafe) {
    __insert_methods_test()
} >> {
    public function testThrowsIfValueInsertedOfInvalidType(): void
    {
        $this->expectException(\TypeError::class);
        $vector = self::getInstance();
        $vector->insert([self::INVALID_VALUE]);
    }
    
    $$(expand(
        $<HasMinimumMaximum>{
            public function testThrowsIfValueInsertedIsLowerThanMinimum(): void
            {
                $this->expectException(\OutOfRangeException::class);
                $vector = self::getInstance();
                $vector->insert([$[MinimumValue] - 1]);
            }
            
            public function testThrowsIfValueInsertedIsGreaterThanMaximum(): void
            {
                $this->expectException(\OutOfRangeException::class);
                $vector = self::getInstance();
                $vector->insert([$[MaximumValue] + 1]);
            }
        }
        
        $<String>{
            $(__context_Multibyte ? {
                public function testThrowsIfValueInsertedIsTooShort(): void
                {
                    $this->expectException(\LengthException::class);
                    $vector = self::getInstance();
                    $vector->insert([\substr($[DefaultValue], 0, -1)]);
                }
            })
            
            public function testThrowsIfValueInsertedIsTooLong(): void
            {
                $this->expectException(\LengthException::class);
                $vector = self::getInstance();
                $vector->insert([$[DefaultValue] . "\x0"]);
            }
        }
    ))
    
    public static function insertionProvider(): \Generator
    {
        $originalElements = [
            self::getRandomValue(),
            self::getRandomValue(),
            self::getRandomValue(),
            self::getRandomValue(),
            self::getRandomValue(),
            self::getRandomValue(),
        ];
        
        foreach ([
            // Random test cases.
            [[], [], -3, [self::SEQUENCE_DEFAULT_VALUE, self::SEQUENCE_DEFAULT_VALUE]],
            [[], [], -2, [self::SEQUENCE_DEFAULT_VALUE]],
            [[], [], -1, []],
            [[], [], 0, []],
            [[], [], 1, [self::SEQUENCE_DEFAULT_VALUE]],
            [[1], [], -3, [self::SEQUENCE_DEFAULT_VALUE, 1]],
            [[1], [], -2, [1]],
            [[1], [], -1, [1]],
            [[1], [], 0, [1]],
            [[1], [], 1, [1]],
            [[], [1], -3, [1, self::SEQUENCE_DEFAULT_VALUE, self::SEQUENCE_DEFAULT_VALUE]],
            [[], [1], -2, [1, self::SEQUENCE_DEFAULT_VALUE]],
            [[], [1], -1, [1]],
            [[], [1], 0, [1]],
            [[], [1], 1, [self::SEQUENCE_DEFAULT_VALUE, 1]],
            [[0, 1, 2, 3, 0, 1, 2], [4, 5], 3, [0, 1, 2, 4, 5, 3, 0, 1, 2]],
            [[0, 1, 2, 3, self::SEQUENCE_SKIP_VALUE, 1, 2], [4, 5], 3, [0, 1, 2, 4, 5, 3, self::SEQUENCE_DEFAULT_VALUE, 1, 2]],
            
            // `($howManyBitsToInsert & 7) > 0`
            [
                [0, 1, 2, 3, 0, 1, 2, 3],
                [
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0,
                ],
                0,
                [
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0,
                    0, 1, 2, 3, 0, 1, 2, 3,
                ],
            ],
            
            // Zero or more elements are to be inserted
            // after the existing elements (X?G?N?).
            [[], [], 1, [self::SEQUENCE_DEFAULT_VALUE]],
            
            // `$howManyBitsToInsert > 0`
            [[], [1], 0, [1]],
            
            // `$tailRelativeBitIndex > 0`
            [[2], [1], 1, [2, 1]],
            
            // `$firstIndex < 0`
            [[2, 3], [1], -2, [1, 2, 3]],
            
            // Keep the indices within the bounds.
            [[2], [1], -2, [1, 2]],
            
            // Resize the bitmap if the negative first bit
            // index is greater than the new bit count (N?GX?).
            [[], [1], -8, [1, self::SEQUENCE_DEFAULT_VALUE, self::SEQUENCE_DEFAULT_VALUE, self::SEQUENCE_DEFAULT_VALUE, self::SEQUENCE_DEFAULT_VALUE, self::SEQUENCE_DEFAULT_VALUE, self::SEQUENCE_DEFAULT_VALUE, self::SEQUENCE_DEFAULT_VALUE]],
            
            // The gap did not end at a full byte,
            // so remove the superfluous bits.
            [[], [1], -2, [1, self::SEQUENCE_DEFAULT_VALUE]],
            
            // The bits are not to be inserted at the beginning,
            // so splice (XNX).
            [
                [
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0, 1, 2, 3, 0, 1, 2, 3,
                ],
                [0, 1, 2, 3, 0, 1, 2, 3],
                8,
                [
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0, 1, 2, 3, 0, 1, 2, 3,
                ],
            ],
            
            // The bits are to be inserted at the beginning,
            // so prepend (NX).
            [
                [0, 1, 2, 3, 0, 1, 2, 3],
                [0, 1, 2, 3, 0, 1, 2, 3],
                0,
                [
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0, 1, 2, 3, 0, 1, 2, 3,
                ],
            ],
            
            // `0 === ($firstIndex & 7) && ($howManyBitsToInsert & 7) > 0`
            [[1], [1], 0, [1, 1]],
            
            // Splice inside a byte (XNX).
            [
                [0, 1, 2, 3, 0, 1, 2, 3],
                [0, 1, 2, 3, 0, 1, 2, 3],
                1,
                [
                    0,
                    0, 1, 2, 3, 0, 1, 2, 3,
                    1, 2, 3, 0, 1, 2, 3,
                ],
            ],
            
            // The tail did not end at a full byte,
            // so remove the superfluous bits.
            [
                [0, 1, 2, 3, 0, 1, 2],
                [0, 1, 2, 3, 0, 1, 2, 3],
                1,
                [
                    0,
                    0, 1, 2, 3, 0, 1, 2, 3,
                    1, 2, 3, 0, 1, 2,
                ],
            ],
            
            // `($firstIndex & 7) > 0 && ($howManyBitsToInsert & 7) > 0`
            [
                [0, 1, 2, 3, 0, 1, 2, 3],
                [0, 1, 2, 3, 0, 1, 2],
                1,
                [
                    0,
                    0, 1, 2, 3, 0, 1, 2,
                    1, 2, 3, 0, 1, 2, 3,
                ],
            ],
        ] as [$originalSequence, $inserted, $firstIndex, $expected]) {
            $batch = [$originalElements];
            $<Nullable>{
                $elements = $originalElements;
                $elements[\array_rand($elements)] = null;
                $elements[\array_rand($elements)] = null;
                $batch[] = $elements;
            }
            
            foreach ($batch as $elements) {
                $vector = self::getInstance();
                $sequence = $originalSequence;
                foreach ($sequence as $index => $key) {
                    if (self::SEQUENCE_SKIP_VALUE === $key) {
                        $sequence[$index] = $[DefaultValue];
                    } else {
                        $vector[$index] = $elements[$key];
                    }
                }
                $originalVector = clone $vector;
                yield [$vector, $elements, false, $sequence, $inserted, $firstIndex, $expected];
            }
        }
        
        // Repeat the last test using a generator instead of an array.
        yield [$originalVector, $elements, true, $sequence, $inserted, $firstIndex, $expected];
    }
    
    /**
     * @dataProvider insertionProvider
     */
    public function testInsert(
        \Vectory\VectorInterface $vector,
        array $elements,
        bool $useGenerator,
        array $sequence,
        array $inserted,
        int $firstIndex,
        array $expected
    ): void {
        $expectedSequence = [];
        foreach ($expected as $key) {
            if (self::SEQUENCE_DEFAULT_VALUE === $key) {
                $expectedSequence[] = $[DefaultValue];
            } else {
                $expectedSequence[] = $elements[$key];
            }
        }
        $generator = (static function () use ($elements, $inserted) {
            foreach ($inserted as $key) {
                yield $elements[$key];
            }
        })();
        $vector->insert(
            $useGenerator ? $generator : \iterator_to_array($generator),
            $firstIndex
        );
        self::assertSequence($expectedSequence, $vector);
    }
}