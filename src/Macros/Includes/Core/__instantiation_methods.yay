<?php

$(macro) { $[BatchSize] } >> { 100 }
$(macro) { $[FilledCount] } >> { 10000 }
$(macro) { $[FilledLastIndex] } >> { 9999 }

$(macro :unsafe) {
    __instantiation_methods()
} >> {
    $<PoweredByString>{
        private const INVALID_VALUE = $$(expand(
            $<Integer>{ '0' }
            $<!Integer>{ 0 }
        ));
    }
    
    $<PoweredByArray>{
        public static function getInstance(bool $filled = false): array
        {
            return $filled ? \array_fill(0, $[FilledCount], $[DefaultValue]) : [];
        }
    }
    $<PoweredByDsDeque>{
        public static function getInstance(bool $filled = false): \Ds\Sequence
        {
            $instance = new \Ds\Deque();
            if ($filled) {
                $instance->push(...\array_fill(0, $[FilledCount], $[DefaultValue]));
            }
            return $instance;
        }
    }
    $<PoweredByDsVector>{
        public static function getInstance(bool $filled = false): \Ds\Sequence
        {
            $instance = new \Ds\Vector();
            if ($filled) {
                $instance->push(...\array_fill(0, $[FilledCount], $[DefaultValue]));
            }
            return $instance;
        }
    }
    $<PoweredBySplFixedArray>{
        public static function getInstance(bool $filled = false): \SplFixedArray
        {
            $instance = new \SplFixedArray();
            if ($filled) {
                $instance->setSize($[FilledCount]);
                for ($i = 0; $i < $[FilledCount]; ++$i) {
                    $instance[$i] = false;
                }
            }
            
            return $instance;
        }
    }
    $<PoweredByString>{
        public static function getInstance(bool $filled = false): \Vectory\VectorInterface
        {
            $instance = new $[Fqn]($<!HasStaticElementLength>{$[BytesPerElement]});
            if ($filled) {
                $instance[$[FilledLastIndex]] = $[DefaultValue];
            }
            return $instance;
        }
    }
    
    public static function getRandomValue()
    {
        $$(expand(
            $<Boolean>{
                return [false, true][\mt_rand(0, 1)];
            }
            $<Integer>{
                $<Signed>{
                    $positive = 0 === \mt_rand(0, 1);
                    $value = \dechex(\mt_rand(0x0, 0x7f));
                }
                $<!Signed>{
                    $value = \dechex(\mt_rand(0x0, 0xff));
                }
                
                for ($i = 1; $i < $[BytesPerElement]; ++$i) {
                    $value .= \str_pad(\dechex(\mt_rand(0x0, 0xff)), 2, '0', \STR_PAD_LEFT);
                }
                $value = \hexdec($value);
                
                $<Signed>{
                    return $positive ? $value : -$value;
                }
                $<!Signed>{
                    return $value;
                }
            }
            $<String>{
                $value = '';
                for ($i = 0; $i < $[BytesPerElement]; ++$i) {
                    $value .= \chr(\mt_rand(0x0, 0xff));
                }
                return $value;
            }
        ))
    }
        
    $<Signed>{
        public static function getRandomSignedInteger(bool $negative): int
        {
            $value = \dechex(\mt_rand(0x0, 0x7f));
            for ($i = 1; $i < $[BytesPerElement]; ++$i) {
                $value .= \str_pad(\dechex(\mt_rand(0x0, 0xff)), 2, '0', \STR_PAD_LEFT);
            }
            $value = \hexdec($value);
            $value = ($negative ? ($value < 0 ? -$value : $[MinimumValue]) : $value);
            return (int) $value;
        }
    }
        
    $$(expand(
        $<String>{
            public static function getRandomUtf8String(): string
            {
                \assert(0x10ffff <= \mt_getrandmax());
                $string = '';
                while (\strlen($string) < $[BytesPerElement]) {
                    $characterMaxLength = \min(4, $[BytesPerElement] - \strlen($string));
                    $character = '';
                    switch (\mt_rand(1, $characterMaxLength)) {
                        case 1:
                            $character = \mb_chr(\mt_rand(0x0, 0x7f));
                            break;
                            
                        case 2:
                            $character = \mb_chr(\mt_rand(0x80, 0x7ff));
                            break;
                            
                        case 3:
                            $character = \mb_chr(\mt_rand(0x800, 0xffff));
                            break;

                        case 4:
                            $character = \mb_chr(\mt_rand(0x10000, 0x10ffff));
                            break;
                    }
                    $string .= $character;
                }
                return $string;
            }
        }
    ))
}