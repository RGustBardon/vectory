<?php

$(macro :unsafe) {
    __test_methods()
    $(_() as __context_Signed)
    $(_() as __context_Type_bool)
    $(_() as __context_Type_int)
    $(_() as __context_Type_string)
} >> function (\Yay\Ast $ast, \Yay\TokenStream $ts, \Yay\Index $start, \Yay\Index $end, \Yay\Engine $engine) {
    if (Vectory::isInteger() && Vectory::isSigned()) {
        $append = new \Yay\Ast('__context_Signed');
        $append->push(new \Yay\Ast());
        $ast->append($append);
    }
    $append = new \Yay\Ast('__context_Type_'.Vectory::getType());
    $append->push(new \Yay\Ast());
    $ast->append($append);
} >> {
    protected function setUp(): void
    {
        \mt_srand(0);
    }
    
    private static function getInstance(): VectorInterface
    {
        return new $[Fqn]();
    }
    
    private static function getRandomValue()
    {
        $(__context_Type_bool ? {
            return [false, true][\mt_rand(0, 1)];
        })
        $(__context_Type_int ? {
            $(__context_Signed ? {
                $positive = 0 === \mt_rand(0, 1);
                $value = \dechex(\mt_rand(0x0, $positive ? 0x7f : 0x80));
            });
            $(__context_Signed ! {
                $value = \dechex(\mt_rand(0x0, 0xff));
            });
            
            for ($i = 1; $i < $[BytesPerElement]; ++$i) {
                $value .= \str_pad(\dechex(\mt_rand(0x0, 0xff)), 2, '0', \STR_PAD_LEFT);
            }
            $value = \hexdec($value);
            
            $(__context_Signed ? {
                return $positive ? $value : -$value;
            });
            $(__context_Signed ! {
                return $value;
            });
        })
        $(__context_Type_string ? {
            $value = '';
            for ($i = 0; $i < $[BytesPerElement]; ++$i) {
                $value .= \chr(\mt_rand(0x0, 0xff));
            }
            return $value;
        })
    }
}