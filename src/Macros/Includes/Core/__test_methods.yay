<?php

$(macro :unsafe) {
    __test_methods()
} >> {
    private const INVALID_VALUE = $$(expand(
        $<Integer>{ '0' }
        $<!Integer>{ 0 }
    ));
    
    protected function setUp(): void
    {
        \mt_srand(0);
    }
    
    private static function getInstance(): VectorInterface
    {
        return new $[Fqn]();
    }
    
    private static function getRandomValue()
    {
        $$(expand(
            $<Boolean>{
                return [false, true][\mt_rand(0, 1)];
            }
            $<Integer>{
                $<Signed>{
                    $positive = 0 === \mt_rand(0, 1);
                    $value = \dechex(\mt_rand(0x0, $positive ? 0x7f : 0x80));
                }
                $<!Signed>{
                    $value = \dechex(\mt_rand(0x0, 0xff));
                }
                
                for ($i = 1; $i < $[BytesPerElement]; ++$i) {
                    $value .= \str_pad(\dechex(\mt_rand(0x0, 0xff)), 2, '0', \STR_PAD_LEFT);
                }
                $value = \hexdec($value);
                
                $<Signed>{
                    return $positive ? $value : -$value;
                }
                $<!Signed>{
                    return $value;
                }
            }
            $<String>{
                $value = '';
                for ($i = 0; $i < $[BytesPerElement]; ++$i) {
                    $value .= \chr(\mt_rand(0x0, 0xff));
                }
                return $value;
            }
        ))
    }
}