<?php

$(macro :unsafe) {
    __test_methods()
} >> {
    private static function assertSequence(array $sequence, \Vectory\VectorInterface $vector): void
    {
        self::assertCount(\count($sequence), $vector);
        $i = 0;
        foreach ($vector as $index => $element) {
            self::assertSame($i, $index);
            self::assertSame(
                $sequence[$index],
                $element,
                'Index: '.$index."\n".
                    var_export($sequence, true)."\n".
                    self::getVectorDump($vector)
            );
            ++$i;
        }
    }
    
    private static function getVectorDump(VectorInterface $vector): string
    {
        $dump = "\n";
        $trace = \array_reverse(debug_backtrace(\DEBUG_BACKTRACE_IGNORE_ARGS));
        foreach ($trace as $frame) {
            if (0 === \strpos($frame['class'], 'Vectory')) {
                $frame['class'] = \substr($frame['class'], \strrpos($frame['class'], '\\') + 1);
                $dump .= \sprintf("%s%s%s:%d\n", $frame['class'], $frame['type'], $frame['function'], $frame['line']);
            }
        }
        
        \ob_start();
        \var_dump($vector);
        $dump .= \ob_get_clean();
        return $dump;
    }
}