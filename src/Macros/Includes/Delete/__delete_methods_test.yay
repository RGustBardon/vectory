<?php

$(macro :unsafe) {
    __delete_methods_test()
} >> {
    public static function deletionProvider(): \Generator
    {
        $originalElements = [
            self::getRandomValue(),
            self::getRandomValue(),
            self::getRandomValue(),
            self::getRandomValue(),
            self::getRandomValue(),
            self::getRandomValue(),
        ];

        foreach ([
            // Random test cases.
            [[], -1, 0, []],
            [[], 0, 0, []],
            [[], 1, 0, []],
            [[], -1, 1, []],
            [[], 0, 1, []],
            [[], 1, 1, []],
            [[0], -1, 0, [0]],
            [[0], -1, 1, []],
            [[0], -1, 2, []],
            [[0], 0, 0, [0]],
            [[0], 0, 1, []],
            [[0], 0, 2, []],
            [[0], 1, 0, [0]],
            [[0], 1, 1, [0]],
            [[0], 1, 2, [0]],
            [[0, 1], -2, 1, [1]],
            [[0, 1], -2, 2, []],
            [[0, 1], -1, 1, [0]],
            [[0, 1], -1, 2, [0]],
            [[0, 1], 0, 1, [1]],
            [[0, 1], 0, 2, []],
            [[0, 1], 1, 1, [0]],
            [[0, 1], 1, 2, [0]],
            [[0, 1, 2, 3, 4, 5], 0, 3, [3, 4, 5]],
            [[0, 1, 2, 3, 4, 5], 1, 1, [0, 2, 3, 4, 5]],
            [[0, 1, 2, 3, 4, 5], 1, 3, [0, 4, 5]],
            [[0, 1, 2, 3, 4, 5], 2, 3, [0, 1, 5]],
            [[0, 1, 2, 3, 4, 5], 3, 3, [0, 1, 2]],
            [[0, 1, 2, 3, 4, 5], 4, 3, [0, 1, 2, 3]],
            [[0, 1, 2, 3, 4, 5], 5, 3, [0, 1, 2, 3, 4]],
            [[0, 1, 2, 3, 4, 5], -1, 3, [0, 1, 2, 3, 4]],
            [[0, 1, 2, 3, 4, 5], -2, 3, [0, 1, 2, 3]],
            [[0, 1, 2, 3, 4, 5], -3, 3, [0, 1, 2]],
            [[0, 1, 2, 3, 4, 5], -4, 3, [0, 1, 5]],
            [[0, 1, 2, 3, 4, 5], -5, 3, [0, 4, 5]],
            [[self::SEQUENCE_SKIP_VALUE, 1, 2, 3, 4, 5], -5, 3, [self::SEQUENCE_DEFAULT_VALUE, 4, 5]],
            [[0, 1, 2, 3, 4, 5], -6, 3, [3, 4, 5]],
            [[0, 1, 2, 3, 4, 5], -7, 3, [2, 3, 4, 5]],
            [[1, 2, 1, 2, 1, 2], 2, 3, [1, 2, 2]],
            [[1, self::SEQUENCE_SKIP_VALUE, 1, 2, 1, 0], 2, 3, [1, self::SEQUENCE_DEFAULT_VALUE, 0]],
            
            // Calculate the positive index corresponding to the negative one.
            [[0, 1, 2], -1, 1, [0, 1]],
            
            // If we still end up with a negative index, decrease `$howMany`.
            [[0, 1, 2], -4, 3, [2]],
            
            // Check if there is anything to delete or
            // if the positive index is out of bounds.
            [[0], 0, 0, [0]],
            [[], 0, 1, []],
            [[0], 1, 1, [0]],
            
            // If the first index conceptually begins a byte
            // and everything to its right is to be deleted,
            // no bit-shifting is necessary.
            [
                [
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0, 1, 2, 3, 0, 1, 2, 3,
                ],
                8,
                8,
                [
                    0, 1, 2, 3, 0, 1, 2, 3,
                ],
            ],
            
            // `$howManyFullBytes > 0` and then `0 === $howMany`
            [
                [
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0,
                ],
                8,
                8,
                [
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0,
                ],
            ],
            
            // There are not enough bits in the assembled byte,
            // so augment it with the next source byte.
            [
                [
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0, 1, 2, 3, 0, 1, 2, 3,
                    0,
                ],
                8,
                17,
                [
                    0, 1, 2, 3, 0, 1, 2, 3,
                    1, 2, 3, 0, 1, 2, 3,
                    0,
                ],
            ],
            
            // Some of the bits of the target byte need to be preserved,
            // so augment the assembled byte.
            [[0, 1, 2], 1, 1, [0, 2]],
        ] as [$originalSequence, $firstIndex, $howMany, $expected]) {
            $batch = [$originalElements];
            $<Nullable>{ 
                $elements = $originalElements;
                $elements[\array_rand($elements)] = null;
                $elements[\array_rand($elements)] = null;
                $batch[] = $elements;
            }
            
            foreach ($batch as $elements) {
                $vector = self::getInstance();
                $sequence = $originalSequence;
                foreach ($sequence as $index => $key) {
                    if (self::SEQUENCE_SKIP_VALUE === $key) {
                        $sequence[$index] = $[DefaultValue];
                    } else {
                        $vector[$index] = $elements[$key];
                    }
                }
                yield [$vector, $elements, $sequence, $firstIndex, $howMany, $expected];
            }
        }
    }
    
    /**
     * @dataProvider deletionProvider
     */
    public function testDelete(
        \Vectory\VectorInterface $vector,
        array $elements,
        array $sequence,
        int $firstIndex,
        int $howMany,
        array $expected
    ): void {
        $expectedSequence = [];
        foreach ($expected as $key) {
            if (self::SEQUENCE_DEFAULT_VALUE === $key) {
                $expectedSequence[] = $[DefaultValue];
            } else {
                $expectedSequence[] = $elements[$key];
            }
        }
        $vector->delete($firstIndex, $howMany);
        self::assertSequence($expectedSequence, $vector);
    }
}