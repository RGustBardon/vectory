<?php

$(macro :unsafe) {
    __delete_methods_benchmark()
} >> {
    private $instanceForDeleteAtHead;
    
    private $instanceForDeleteAtTail;
    
    private function setUpDeleteBenchmark(): void
    {
        $this->instanceForDeleteAtHead = self::getInstance(true);
        $this->instanceForDeleteAtTail = self::getInstance(true);
    }
    
    /**
     * @Revs(100)
     */
    public function benchDeleteAtHead(): void
    {
        $<PoweredByArray>{
            \array_splice($this->instanceForDeleteAtHead, 0, \mt_rand(1, $[BatchSize]));
        }
        $<PoweredByDsSequence>{
            $this->instanceForDeleteAtHead = $this->instanceForDeleteAtHead->slice(\mt_rand(1, $[BatchSize]));
        }
        $<PoweredBySplFixedArray>{
            $this->instanceForDeleteAtHead = \SplFixedArray::fromArray(\array_slice($this->instanceForDeleteAtHead->toArray(), \mt_rand(1, $[BatchSize])), false);
        }
        $<PoweredByString>{
            $this->instanceForDeleteAtHead->delete(0, \mt_rand(0, $[BatchSize]));
        }
    }
    
    /**
     * @Revs(100)
     */
    public function benchDeleteAtTail(): void
    {
        $<PoweredByArray>{
            \array_splice($this->instanceForDeleteAtTail, -\mt_rand(1, $[BatchSize]));
        }
        $<PoweredByDsSequence>{
            for ($i = \mt_rand(1, $[BatchSize]); $i > 0; --$i) {
                $this->instanceForDeleteAtTail->pop();
            }
        }
        $<PoweredBySplFixedArray>{
            $this->instanceForDeleteAtTail->setSize(\count($this->instanceForDeleteAtTail) - \mt_rand(1, $[BatchSize]));
        }
        $<PoweredByString>{
            $this->instanceForDeleteAtTail->delete(-\mt_rand(0, $[BatchSize]));
        }
    }
}