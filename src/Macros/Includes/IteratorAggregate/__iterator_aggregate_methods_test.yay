<?php

$(macro :unsafe) {
    __iterator_aggregate_methods_test()
} >> {
    /**
     * @depends testArrayAccess
     */
    public function testIteratorAggregate(): void
    {
        $vector = self::getInstance();
        self::assertSame([], \iterator_to_array($vector));

        $element = self::getRandomValue();
        $vector[1] = $element;
        self::assertSame(
            [$[DefaultValue], $element],
            \iterator_to_array($vector)
        );
        
        unset($vector[0]);
        self::assertSame(
            [$element],
            \iterator_to_array($vector)
        );
    }
    
    /**
     * @depends testIteratorAggregate
     */
    public function testIteratorAggregateWithModification(): void
    {
        $vector = self::getInstance();
        $elements = [
            self::getRandomValue(),
            $<Signed>{
                self::getRandomSignedInteger(false),
                self::getRandomSignedInteger(true),
            }
            $<!Signed>{
                self::getRandomValue(),
                self::getRandomValue(),
            }
        ];
        
        $sequence = [$elements[1], $elements[2], $elements[1]];
        foreach ($sequence as $element) {
            $vector[] = $element;
        }
        
        $iterations = [];
        foreach ($vector as $outerIndex => $outerElement) {
            if (1 === $outerIndex) {
                $vector[] = $elements[2];
            }
            $innerIteration = [];
            foreach ($vector as $innerIndex => $innerElement) {
                if (1 === $innerIndex) {
                    $vector[2] = $elements[0];
                }
                $innerIteration[] = [$innerIndex, $innerElement];
            }
            $iterations[] = $innerIteration;
            $iterations[] = [$outerIndex, $outerElement];
        }
        self::assertSame([
            [[0, $elements[1]], [1, $elements[2]], [2, $elements[1]]],
            [0, $elements[1]],
            [[0, $elements[1]], [1, $elements[2]], [2, $elements[0]], [3, $elements[2]]],
            [1, $elements[2]],
            [[0, $elements[1]], [1, $elements[2]], [2, $elements[0]], [3, $elements[2]]],
            [2, $elements[1]],
        ], $iterations);
    }
    
    $$(expand(
        $<Nullable>{
            /**
             * @depends testOffsetSetWithNullValue
             */
            public function testIteratorAggregateWithNullValue(): void
            {
                $vector = self::getInstance();
                
                $vector[0] = null;
                self::assertSame([null], \iterator_to_array($vector));
                $vector[2] = null;
                self::assertSame(
                    [null, $[DefaultValue], null],
                    \iterator_to_array($vector)
                );
            }
        }
    ))
}