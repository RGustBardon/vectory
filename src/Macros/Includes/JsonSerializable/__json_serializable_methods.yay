<?php

$(macro :unsafe) {
    __json_serializable_methods()
} >> {
    public function jsonSerialize(): array
    {
        if ('' === $this->primarySource) {
            return [];
        }

        $jsonData = [];

        $<Nullable>{
            static $mask = ["\x1", "\x2", "\x4", "\x8", "\x10", "\x20", "\x40", "\x80"];
            $elementCount = $this->elementCount;
            $nullabilitySource = $this->nullabilitySource;
            $primarySource = $this->primarySource;
            $<Boolean>{
                for (
                    $byteIndex = 0, $lastByteIndex = (($elementCount + 7) >> 3) - 1;
                    $byteIndex < $lastByteIndex;
                    ++$byteIndex
                ) {
                    $primaryByte = $primarySource[$byteIndex];
                    $nullabilityByte = $nullabilitySource[$byteIndex];
                    \array_push(
                        $jsonData,
                        ("\x0" === ($nullabilityByte & "\x01")) ? ("\x0" !== ($primaryByte & "\x01")) : null,
                        ("\x0" === ($nullabilityByte & "\x02")) ? ("\x0" !== ($primaryByte & "\x02")) : null,
                        ("\x0" === ($nullabilityByte & "\x04")) ? ("\x0" !== ($primaryByte & "\x04")) : null,
                        ("\x0" === ($nullabilityByte & "\x08")) ? ("\x0" !== ($primaryByte & "\x08")) : null,
                        ("\x0" === ($nullabilityByte & "\x10")) ? ("\x0" !== ($primaryByte & "\x10")) : null,
                        ("\x0" === ($nullabilityByte & "\x20")) ? ("\x0" !== ($primaryByte & "\x20")) : null,
                        ("\x0" === ($nullabilityByte & "\x40")) ? ("\x0" !== ($primaryByte & "\x40")) : null,
                        ("\x0" === ($nullabilityByte & "\x80")) ? ("\x0" !== ($primaryByte & "\x80")) : null
                    );
                }
                
                if ($lastByteIndex >= 0) {
                    $primaryByte = $primarySource[$lastByteIndex];
                    $nullabilityByte = $nullabilitySource[$lastByteIndex];
                    for ($bit = 0, $bitIndex = ($lastByteIndex << 3); $bitIndex < $elementCount; ++$bitIndex, ++$bit) {
                        $jsonData[] = ("\x0" === ($nullabilityByte & $mask[$bit])) ? ("\x0" !== ($primaryByte & $mask[$bit])): null;
                    }
                }
            }
            $<Integer>{
                $bitIndex = 0;
                $nullabilityByte = null;
                $$(expand(
                    $<Signed>{
                        foreach ($$(expand(
                            $<Takes1>{\unpack('c*', $primarySource)}
                            $<Takes2>{\unpack('s*', $primarySource)}
                            $<Takes3>{\unpack('V*', \chunk_split($primarySource, 3, "\0")."\0")}
                            $<Takes4>{\unpack('l*', $primarySource)}
                            $<Takes5>{\unpack('P*', \chunk_split($primarySource, 5, "\0\0\0")."\0\0\0")}
                            $<Takes6>{\unpack('P*', \chunk_split($primarySource, 6, "\0\0")."\0\0")}
                            $<Takes7>{\unpack('P*', \chunk_split($primarySource, 7, "\0")."\0")}
                            $<Takes8>{\unpack('q*', $primarySource)}
                        )) as $element) {
                            if (0 === ($bitIndex & 7)) {
                                $nullabilityByte = $nullabilitySource[$bitIndex >> 3];
                            }
                            $jsonData[] = ("\x0" === ($nullabilityByte & $mask[$bitIndex & 7])) ? (
                                $<Takes1>{ $element }
                                $<Takes2>{ $element }
                                $<Takes3>{ $element > $[MaximumValue] ? $[MaximumValue] - $element : $element }
                                $<Takes4>{ $element }
                                $<Takes5>{ $element > $[MaximumValue] ? $[MaximumValue] - $element : $element }
                                $<Takes6>{ $element > $[MaximumValue] ? $[MaximumValue] - $element : $element }
                                $<Takes7>{ $element > $[MaximumValue] ? $[MaximumValue] - $element : $element }
                                $<Takes8>{ $element }
                            ) : null;
                            ++$bitIndex;
                        }
                    }
                    $<!Signed>{
                        foreach ($$(expand(
                            $<Takes1>{\unpack('C*', $primarySource)}
                            $<Takes2>{\unpack('v*', $primarySource)}
                            $<Takes3>{\unpack('V*', \chunk_split($primarySource, 3, "\0")."\0")}
                            $<Takes4>{\unpack('V*', $primarySource)}
                            $<Takes5>{\unpack('P*', \chunk_split($primarySource, 5, "\0\0\0")."\0\0\0")}
                            $<Takes6>{\unpack('P*', \chunk_split($primarySource, 6, "\0\0")."\0\0")}
                            $<Takes7>{\unpack('P*', \chunk_split($primarySource, 7, "\0")."\0")}
                        )) as $element) {
                            if (0 === ($bitIndex & 7)) {
                                $nullabilityByte = $nullabilitySource[$bitIndex >> 3];
                            }
                            $jsonData[] = ("\x0" === ($nullabilityByte & $mask[$bitIndex & 7])) ? $element : null;
                            ++$bitIndex;
                        }
                    }
                ))
            }
            $<String>{
                for (
                    $index = 0, $lastIndex = ($elementCount & ~7);
                    $index < $lastIndex;
                ) {
                    $batchSize = \min(256, $lastIndex - $index);
                    
                    $nullabilityBatch = \substr($nullabilitySource, $index >> 3, $batchSize >> 3);
                    $<Takes1>{
                        $primaryBatch = \substr($primarySource, $index, $batchSize);
                    }
                    $<!Takes1>{
                        $primaryBatch = \str_split(
                            \substr($primarySource, $index * $[BytesPerElement], $batchSize * $[BytesPerElement]),
                            $[BytesPerElement]
                        );
                    }
                    
                    for ($batchIndex = 0; $batchIndex < $batchSize; $batchIndex += 8) {
                        $nullabilityByte = $nullabilityBatch[$batchIndex >> 3];
                        \array_push(
                            $jsonData,
                            ("\x0" === ($nullabilityByte & "\x01")) ? $primaryBatch[$batchIndex] : null,
                            ("\x0" === ($nullabilityByte & "\x02")) ? $primaryBatch[$batchIndex + 1] : null,
                            ("\x0" === ($nullabilityByte & "\x04")) ? $primaryBatch[$batchIndex + 2] : null,
                            ("\x0" === ($nullabilityByte & "\x08")) ? $primaryBatch[$batchIndex + 3] : null,
                            ("\x0" === ($nullabilityByte & "\x10")) ? $primaryBatch[$batchIndex + 4] : null,
                            ("\x0" === ($nullabilityByte & "\x20")) ? $primaryBatch[$batchIndex + 5] : null,
                            ("\x0" === ($nullabilityByte & "\x40")) ? $primaryBatch[$batchIndex + 6] : null,
                            ("\x0" === ($nullabilityByte & "\x80")) ? $primaryBatch[$batchIndex + 7] : null
                        );
                    }
                    $index += $batchSize;
                }
                
                for (; $index < $elementCount; ++$index) {
                    if ("\0" === ($nullabilitySource[$index >> 3] & $mask[$index & 7])) {
                        $<Takes1>{
                            $jsonData[] = $primarySource[$index];
                        }
                        $<!Takes1>{
                            $jsonData[] = \substr($primarySource, $index * $[BytesPerElement], $[BytesPerElement]);
                        }
                    } else {
                        $jsonData[] = null;
                    }
                }
            }
        }
        $<!Nullable>{
            $<Boolean>{
                static $mask = ["\x1", "\x2", "\x4", "\x8", "\x10", "\x20", "\x40", "\x80"];
                
                $elementCount = $this->elementCount;
                $primarySource = $this->primarySource;
                for (
                    $byteIndex = 0, $lastByteIndex = (($elementCount + 7) >> 3) - 1;
                    $byteIndex < $lastByteIndex;
                    ++$byteIndex
                ) {
                    $byte = $primarySource[$byteIndex];
                    \array_push(
                        $jsonData,
                        "\x0" !== ($byte & "\x01"),
                        "\x0" !== ($byte & "\x02"),
                        "\x0" !== ($byte & "\x04"),
                        "\x0" !== ($byte & "\x08"),
                        "\x0" !== ($byte & "\x10"),
                        "\x0" !== ($byte & "\x20"),
                        "\x0" !== ($byte & "\x40"),
                        "\x0" !== ($byte & "\x80")
                    );
                }
                
                if ($lastByteIndex >= 0) {
                    for ($bit = 0, $byte = $primarySource[$lastByteIndex], $bitIndex = ($lastByteIndex << 3); $bitIndex < $elementCount; ++$bitIndex, ++$bit) {
                        $jsonData[] = "\x0" !== ($byte & $mask[$bit]);
                    }
                }
            }
            $<Integer>{
                $<Takes1>{
                    $$(expand(
                        $<Signed>{
                            \array_push($jsonData, ...\unpack('c*', $this->primarySource));
                        }
                        $<!Signed>{
                            \array_push($jsonData, ...\unpack('C*', $this->primarySource));
                        }
                    ))
                }
                $<Takes2>{
                    $$(expand(
                        $<Signed>{
                            \array_push($jsonData, ...\unpack('s*', $this->primarySource));
                        }
                        $<!Signed>{
                            \array_push($jsonData, ...\unpack('v*', $this->primarySource));
                        }
                    ))
                }
                $<Takes3>{
                    $$(expand(
                        $<Signed>{
                            foreach (\unpack('V*', \chunk_split($this->primarySource, 3, "\0")."\0") as $element) {
                                $jsonData[] = $element > $[MaximumValue] ? $[MaximumValue] - $element : $element; 
                            }
                        }
                        $<!Signed>{
                            \array_push($jsonData, ...\unpack('V*', \chunk_split($this->primarySource, 3, "\0")."\0"));
                        }
                    ))
                }
                $<Takes4>{
                    $$(expand(
                        $<Signed>{
                            \array_push($jsonData, ...\unpack('l*', $this->primarySource));
                        }
                        $<!Signed>{
                            \array_push($jsonData, ...\unpack('V*', $this->primarySource));
                        }
                    ))
                }
                $<Takes5>{
                    $$(expand(
                        $<Signed>{
                            foreach (\unpack('P*', \chunk_split($this->primarySource, 5, "\0\0\0")."\0\0\0") as $element) {
                                $jsonData[] = $element > $[MaximumValue] ? $[MaximumValue] - $element : $element;
                            }
                        }
                        $<!Signed>{
                            \array_push($jsonData, ...\unpack('P*', \chunk_split($this->primarySource, 5, "\0\0\0")."\0\0\0"));
                        }
                    ))
                }
                $<Takes6>{
                    $$(expand(
                        $<Signed>{
                            foreach (\unpack('P*', \chunk_split($this->primarySource, 6, "\0\0")."\0\0") as $element) {
                                $jsonData[] = $element > $[MaximumValue] ? $[MaximumValue] - $element : $element;
                            }
                        }
                        $<!Signed>{
                            \array_push($jsonData, ...\unpack('P*', \chunk_split($this->primarySource, 6, "\0\0")."\0\0"));
                        }
                    ))
                }
                $<Takes7>{
                    $$(expand(
                        $<Signed>{
                            foreach (\unpack('P*', \chunk_split($this->primarySource, 7, "\0")."\0") as $element) {
                                $jsonData[] = $element > $[MaximumValue] ? $[MaximumValue] - $element : $element;
                            }
                        }
                        $<!Signed>{
                            \array_push($jsonData, ...\unpack('P*', \chunk_split($this->primarySource, 7, "\0")."\0"));
                        }
                    ))
                }
                $<Takes8>{
                    \array_push($jsonData, ...\unpack('q*', $this->primarySource));
                }
            }
            $<String>{
                $elementCount = $this->elementCount;
                $primarySource = $this->primarySource;
                
                $<Takes1>{
                    return \str_split($primarySource);
                }
                $<!Takes1>{
                    $batchSize = 256 * $[BytesPerElement];
                    for ($index = 0; $index < $elementCount; $index += 256) {
                        \array_push(
                            $jsonData,
                            ...(array) \str_split(\substr($primarySource, $index * $[BytesPerElement], $batchSize), $[BytesPerElement])
                        );
                    }
                }
            }
        }

        return $jsonData;
    }
}
