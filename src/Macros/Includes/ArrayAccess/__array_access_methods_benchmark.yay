<?php

$(macro :unsafe) {
    __array_access_methods_benchmark()
} >> {
    private $instanceForArrayAccessOffsetGetRandomAccess;
    
    private $instanceForArrayAccessOffsetSetOverwriting;
    
    private $instanceForArrayAccessOffsetSetPushingWithoutGap;
    $<PoweredBySplFixedArray>{
        private $lastIndexOfArrayAccessOffsetSetPushingWithoutGap = 0;
    }

    private $instanceForArrayAccessOffsetSetPushingWithGap;
    private /* int */ $lastIndexOfArrayAccessOffsetSetPushingWithGap = 0;
    
    private $instanceForArrayAccessOffsetUnsetPopping;
    private /* int */ $lastIndexOfArrayAccessOffsetUnsetPopping = 0;
    
    private $instanceForArrayAccessOffsetUnsetShifting;
    
    private function setUpArrayAccessBenchmark(): void
    {
        $this->instanceForArrayAccessOffsetGetRandomAccess = self::getInstance(true);
        
        $this->instanceForArrayAccessOffsetSetOverwriting = self::getInstance(true);
        
        $this->instanceForArrayAccessOffsetSetPushingWithoutGap = self::getInstance();

        $this->instanceForArrayAccessOffsetSetPushingWithGap = self::getInstance();

        $this->instanceForArrayAccessOffsetUnsetPopping = self::getInstance(true);
        $this->lastIndexOfArrayAccessOffsetUnsetPopping = $[FilledLastIndex];
        
        $this->instanceForArrayAccessOffsetUnsetShifting = self::getInstance(true);
    }
    
    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetGetRandomAccess(): void
    {
        static $_;
        $_ = $this->instanceForArrayAccessOffsetGetRandomAccess[\mt_rand(0, $[FilledLastIndex])];
    }
    
    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetSetOverwriting(): void
    {
        $this->instanceForArrayAccessOffsetSetOverwriting[\mt_rand(0, $[FilledLastIndex])] = $[DefaultValue];
    }
    
    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetSetPushingWithoutGap(): void
    {
        $<PoweredBySplFixedArray>{
            $this->instanceForArrayAccessOffsetSetPushingWithoutGap->setSize($this->lastIndexOfArrayAccessOffsetSetPushingWithoutGap + 1);
            $this->instanceForArrayAccessOffsetSetPushingWithoutGap[$this->lastIndexOfArrayAccessOffsetSetPushingWithoutGap++] = $[DefaultValue];
        }
        $<!PoweredBySplFixedArray>{
            $this->instanceForArrayAccessOffsetSetPushingWithoutGap[] = $[DefaultValue];
        }
    }

    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetSetPushingWithGap(): void
    {
        $<PoweredByArray>{
            $this->instanceForArrayAccessOffsetSetPushingWithGap[$this->lastIndexOfArrayAccessOffsetSetPushingWithGap += $[BatchSize]] = false;
        }
        $<PoweredByDsSequence>{
            $count = \count($this->instanceForArrayAccessOffsetSetPushingWithGap);
            $this->lastIndexOfArrayAccessOffsetSetPushingWithGap += $[BatchSize];
            $this->instanceForArrayAccessOffsetSetPushingWithGap->allocate($this->lastIndexOfArrayAccessOffsetSetPushingWithGap);
            $elements = \array_fill(0, (int) ($this->lastIndexOfArrayAccessOffsetSetPushingWithGap - $count - 1), false);
            $elements[] = false;
            $this->instanceForArrayAccessOffsetSetPushingWithGap->push(...$elements);
        }
        $<PoweredBySplFixedArray>{
            $this->lastIndexOfArrayAccessOffsetSetPushingWithGap += $[BatchSize];
            $this->instanceForArrayAccessOffsetSetPushingWithGap->setSize($this->lastIndexOfArrayAccessOffsetSetPushingWithGap + 1);
            $this->instanceForArrayAccessOffsetSetPushingWithGap[$this->lastIndexOfArrayAccessOffsetSetPushingWithGap] = $[DefaultValue];
        }
        $<PoweredByString>{
            $this->instanceForArrayAccessOffsetSetPushingWithGap[
                $this->lastIndexOfArrayAccessOffsetSetPushingWithGap += $[BatchSize]
            ] = $[DefaultValue];
        }
    }

    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetUnsetPopping(): void
    {
        $<PoweredBySplFixedArray>{
            $this->instanceForArrayAccessOffsetUnsetPopping->setSize($this->lastIndexOfArrayAccessOffsetUnsetPopping--);
        }
        $<!PoweredBySplFixedArray>{
            unset($this->instanceForArrayAccessOffsetUnsetPopping[$this->lastIndexOfArrayAccessOffsetUnsetPopping--]);
        }
    }
    
    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetUnsetShifting(): void
    {
        $<PoweredByArray>{
            unset($this->instanceForArrayAccessOffsetUnsetShifting[0]);
        }
        $<PoweredByDsSequence>{
            $this->instanceForArrayAccessOffsetUnsetShifting->shift();
        }
        $<PoweredBySplFixedArray>{
            $elements = $this->instanceForArrayAccessOffsetUnsetShifting->toArray();
            unset($elements[0]);
            $this->instanceForArrayAccessOffsetUnsetShifting = \SplFixedArray::fromArray($elements, false);
        }
        $<PoweredByString>{
            unset($this->instanceForArrayAccessOffsetUnsetShifting[0]);
        }
    }    
}