<?php

$(macro :unsafe) {
    __array_access_methods_benchmark()
} >> {
    private /* \Vectory\VectorInterface */ $instanceForArrayAccessOffsetGetRandomAccess;
    
    private /* \Vectory\VectorInterface */ $instanceForArrayAccessOffsetSetOverwriting;
    
    private /* \Vectory\VectorInterface */ $instanceForArrayAccessOffsetSetPushingWithoutGap;

    private /* \Vectory\VectorInterface */ $instanceForArrayAccessOffsetSetPushingWithGap;
    private /* int */ $lastIndexOfArrayAccessOffsetSetPushingWithGap = 0;
    
    private /* \Vectory\VectorInterface */ $instanceForArrayAccessOffsetUnsetPopping;
    private /* int */ $lastIndexOfArrayAccessOffsetUnsetPopping = 0;
    
    private /* \Vectory\VectorInterface */ $instanceForArrayAccessOffsetUnsetShifting;
    
    private function setUpArrayAccessBenchmark(): void
    {
        $this->instanceForArrayAccessOffsetGetRandomAccess = self::getInstance();
        $this->instanceForArrayAccessOffsetGetRandomAccess[9999] = $[DefaultValue];
        
        $this->instanceForArrayAccessOffsetSetOverwriting = self::getInstance();
        $this->instanceForArrayAccessOffsetSetOverwriting[9999] = $[DefaultValue];
        
        $this->instanceForArrayAccessOffsetSetPushingWithoutGap = self::getInstance();

        $this->instanceForArrayAccessOffsetSetPushingWithGap = self::getInstance();

        $this->instanceForArrayAccessOffsetUnsetPopping = self::getInstance();
        $this->instanceForArrayAccessOffsetUnsetPopping[9999] = $[DefaultValue];
        $this->lastIndexOfArrayAccessOffsetUnsetPopping = 9999;
        
        $this->instanceForArrayAccessOffsetUnsetShifting = self::getInstance();
        $this->instanceForArrayAccessOffsetUnsetShifting[9999] = $[DefaultValue];
    }
    
    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetGetRandomAccess(): void
    {
        static $_;
        $_ = $this->instanceForArrayAccessOffsetGetRandomAccess[\mt_rand(0, 9999)];
    }
    
    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetSetOverwriting(): void
    {
        $this->instanceForArrayAccessOffsetSetOverwriting[\mt_rand(0, 9999)] = $[DefaultValue];
    }
    
    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetSetPushingWithoutGap(): void
    {
        $this->instanceForArrayAccessOffsetSetPushingWithoutGap[] = $[DefaultValue];
    }

    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetSetPushingWithGap(): void
    {
        $this->instanceForArrayAccessOffsetSetPushingWithGap[
            $this->lastIndexOfArrayAccessOffsetSetPushingWithGap += 100
        ] = $[DefaultValue];
    }

    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetUnsetPopping(): void
    {
        unset($this->instanceForArrayAccessOffsetUnsetPopping[
            $this->lastIndexOfArrayAccessOffsetUnsetPopping--
        ]);
    }
    
    /**
     * @Revs(10000)
     */
    public function benchArrayAccessOffsetUnsetShifting(): void
    {
        unset($this->instanceForArrayAccessOffsetUnsetShifting[0]);
    }    
}