<?php

$(macro :unsafe) {
    __do_get_value_boolean(
        $(label() as prefix),
        $(T_VARIABLE as index),
        $(T_VARIABLE as result)
    )
    $(optional(token(';')))
} >> {
    $$(expand(
        $byteIndex = $(index) >> 3;
        __do_get_value_string($(prefix), $byteIndex, $(result))
    ))
    $(result) = ("\x0" !== ($(result) & $mask[$(index) & 7]));
}

$(macro :unsafe) {
    __do_get_value_integer(
        $(label() as prefix),
        $(T_VARIABLE as index),
        $(T_VARIABLE as result)
    )
    $(optional(token(';')))
} >> {
    $$(expand(
        __do_get_value_string($(prefix), $(index), $packedInteger);
        __unpack_integer($packedInteger, $(result));
    ))
}

$(macro :unsafe) {
    __do_get_value_string(
        $(label() as prefix),
        $(T_VARIABLE as index),
        $(T_VARIABLE as result)
    )
    $(optional(token(';')))
    $(_() as __context_BytesPerElement)
    $(_() as __context_OneBytePerElement)
} >> function (\Yay\Ast $ast, \Yay\TokenStream $ts, \Yay\Index $start, \Yay\Index $end, \Yay\Engine $engine) {
    if ('nullability' === (string) $ast->{'prefix'} || Vectory::hasStaticElementLength()) {
        $bytesPerElement = 1;
        if ('nullability' !== (string) $ast->{'prefix'} && !Vectory::isBoolean()) {
            $bytesPerElement = Vectory::getBytesPerElement();
        }
        $token = new \Yay\Token(\T_LNUMBER, (string) $bytesPerElement);
        $ast->append(new \Yay\Ast('__context_BytesPerElement', $token));

        if (1 === $bytesPerElement) {
            $append = new \Yay\Ast('__context_OneBytePerElement');
            $append->push(new \Yay\Ast());
            $ast->append($append);
        }
    }
} >> {
    $(__context_OneBytePerElement ? {
        $(result) = $this->$(prefix)Source[$(index)];
    })
    $(__context_OneBytePerElement ! {
        $(result) = \substr(
            $this->$(prefix)Source,
            $(index) * $(__context_BytesPerElement ?! { $this->elementLength }),
            $(__context_BytesPerElement ?! { $this->elementLength })
        );
    })
}

$(macro :unsafe) {
    __do_get_value(
        $(label() as prefix),
        $(T_VARIABLE as index),
        $(T_VARIABLE as result)
    )
} >> {
    $<Boolean>{
        $$(expand(__do_get_value_boolean($(prefix), $(index), $(result))));
    }
    $<Integer>{
        $$(expand(__do_get_value_integer($(prefix), $(index), $(result))));
    }
    $<String>{
        $$(expand(__do_get_value_string($(prefix), $(index), $(result))));
    }
}

$(macro :unsafe) {
    __get_value(
        $(label() as prefix),
        $(T_VARIABLE as index),
        $(T_VARIABLE as result)
    )
    $(optional(token(';')))
    $(_() as __context_Nullable)
} >> function (\Yay\Ast $ast, \Yay\TokenStream $ts, \Yay\Index $start, \Yay\Index $end, \Yay\Engine $engine) {
    if (Vectory::isNullable() && 'primary' === (string) $ast->{'prefix'}) {
        $append = new \Yay\Ast('__context_Nullable');
        $append->push(new \Yay\Ast());
        $ast->append($append);
    }
} >> {
    $<HasBitArithmetic>{
        static $mask = ["\x1", "\x2", "\x4", "\x8", "\x10", "\x20", "\x40", "\x80"];
    }
    
    $(__context_Nullable ? {
        $$(expand(__do_get_value_boolean(nullability, $(index), $isNull)));
        if ($isNull) {
            $(result) = null;
        } else {
            $$(expand(__do_get_value($(prefix), $(index), $(result))));
        }
    });

    $(__context_Nullable ! {
        $$(expand(__do_get_value($(prefix), $(index), $(result))));
    })
}
