<?php

$(macro :unsafe) {
    __do_set_value_false(
        $(T_VARIABLE as vector),
        $(label() as prefix),
        $(T_VARIABLE as index)
    )
    $(optional(token(';')))
} >> {
    $byteIndex = $(index) >> 3;
    $$(expand(
        __do_set_value_string(
            $(vector),
            $(prefix),
            $byteIndex,
            (($(vector)->$(prefix)Source[$byteIndex] ?? "\x0") & $invertedMask[$(index) & 7])
        )
    ))
}

$(macro :unsafe) {
    __do_set_value_true(
        $(T_VARIABLE as vector),
        $(label() as prefix),
        $(T_VARIABLE as index)
    )
    $(optional(token(';')))
} >> {
    $byteIndex = $(index) >> 3;
    $$(expand(
        __do_set_value_string(
            $(vector),
            $(prefix),
            $byteIndex,
            (($(vector)->$(prefix)Source[$byteIndex] ?? "\x0") | $originalMask[$(index) & 7])
        )
    ))
}

$(macro :unsafe) {
    __do_set_value_boolean(
        $(T_VARIABLE as vector),
        $(label() as prefix),
        $(T_VARIABLE as index),
        $(layer() as value)
    )
    $(optional(token(';')))
} >> {
    if ($(value)) {
        $$(expand(__do_set_value_true($(vector), $(prefix), $(index))))
    } else {
        $$(expand(__do_set_value_false($(vector), $(prefix), $(index))))
    }
}

$(macro :unsafe) {
    __do_set_value_integer(
        $(T_VARIABLE as vector),
        $(label() as prefix),
        $(T_VARIABLE as index),
        $(layer() as value)
    )
    $(optional(token(';')))
} >> {
    // TODO: Pack signed and unsigned integers.
    $(vector)->$(prefix)Source[$(index)] = $(value);
}

$(macro :unsafe) {
    __do_set_value_string(
        $(T_VARIABLE as vector),
        $(label() as prefix),
        $(T_VARIABLE as index),
        $(layer() as value)
    )
    $(optional(token(';')))
    $(_() as __context_BytesPerElement)
    $(_() as __context_OneBytePerElement)
    $(_() as __context_DefaultValue)
} >> function (\Yay\Ast $ast, \Yay\TokenStream $ts, \Yay\Index $start, \Yay\Index $end, \Yay\Engine $engine) {
    $bytesPerElement = 1;
    if ('nullability' !== (string) $ast->{'prefix'} && !Vectory::isBoolean()) {
        $bytesPerElement = Vectory::getBytesPerElement();
    }
    $token = new \Yay\Token(\T_LNUMBER, (string) $bytesPerElement);
    $ast->append(new \Yay\Ast('__context_BytesPerElement', $token));
    
    if (1 === $bytesPerElement) {
        $append = new \Yay\Ast('__context_OneBytePerElement');
        $append->push(new \Yay\Ast());
        $ast->append($append);
    }

    $defaultValue = \str_repeat("\0", $bytesPerElement);
    $token = new \Yay\Token(\T_CONSTANT_ENCAPSED_STRING, '\''.$defaultValue.'\'');
    $ast->append(new \Yay\Ast('__context_DefaultValue', $token));
} >> {
    $unassignedCount = $(index) - \strlen($(vector)->$(prefix)Source) / $(__context_BytesPerElement);
    if ($unassignedCount < 0) {
        // Case 1. Overwrite an existing item.
        $(__context_OneBytePerElement ? {
            $(vector)->$(prefix)Source[$(index)] = $(value);
        })
        $(__context_OneBytePerElement ! {
            $elementIndex = 0;
            $byteIndex = $(index) * $(__context_BytesPerElement);
            do {
                $(vector)->$(prefix)Source[$byteIndex++] = $(value)[$elementIndex++];
            } while ($elementIndex < $(__context_BytesPerElement));
        })
    } elseif (0 === $unassignedCount) {
        // Case 2. Append an element right after the last one.
        $(vector)->$(prefix)Source .= $(value);
    } else {
        // Case 3. Append to a gap after the last element. Fill the gap with default values.
        $(vector)->$(prefix)Source .= \str_repeat($(__context_DefaultValue), (int) $unassignedCount).$(value);
    }
}
    
$(macro :unsafe) {
    __do_set_value(
        $(T_VARIABLE as vector),
        $(label() as prefix),
        $(T_VARIABLE as index),
        $(layer() as value)
    )
    $(optional(token(';')))
} >> {
    $<Boolean>{
        $$(expand(__do_set_value_boolean($(vector), $(prefix), $(index), $(value))));
    }
    $<Integer>{
        $$(expand(__do_set_value_integer($(vector), $(prefix), $(index), $(value))));
    }
    $<String>{
        $$(expand(__do_set_value_string($(vector), $(prefix), $(index), $(value))));
    }
}

$(macro :unsafe) {
    __set_value(
        $(T_VARIABLE as vector),
        $(label() as prefix),
        $(T_VARIABLE as index),
        $(layer() as value)
    )
    $(optional(token(';')))
    $(_() as __context_Nullable)
} >> function (\Yay\Ast $ast, \Yay\TokenStream $ts, \Yay\Index $start, \Yay\Index $end, \Yay\Engine $engine) {
    if (Vectory::isNullable() && 'primary' === (string) $ast->{'prefix'}) {
        $append = new \Yay\Ast('__context_Nullable');
        $append->push(new \Yay\Ast());
        $ast->append($append);
    }
} >> {
    $<HasBitArithmetic>{
        static $originalMask = ["\x1", "\x2", "\x4", "\x8", "\x10", "\x20", "\x40", "\x80"];
        static $invertedMask = ["\xfe", "\xfd", "\xfb", "\xf7", "\xef", "\xdf", "\xbf", "\x7f"];
    }
    
    $(__context_Nullable ? {
        if (null === $(value)) {
            $$(expand(__do_set_value_true($(vector), nullability, $(index))));
        } else {
            $$(expand(__do_set_value_false($(vector), nullability, $(index))));
        }
        $$(expand(__do_set_value($(vector), $(prefix), $(index), ($(value) ?? $[DefaultValue]))));
    });
    
    $(__context_Nullable ! {
        $$(expand(__do_set_value($(vector), $(prefix), $(index), $(value))));
    });
    
    if ($(vector)->elementCount < $(index) + 1) {
        $(vector)->elementCount = $(index) + 1;
    }
}