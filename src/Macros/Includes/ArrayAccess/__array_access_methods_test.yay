<?php

$(macro :unsafe) {
    __array_access_methods_test()
    $(_() as __context_Multibyte)
} >> function (\Yay\Ast $ast, \Yay\TokenStream $ts, \Yay\Index $start, \Yay\Index $end, \Yay\Engine $engine) {
    if (Vectory::isString() && Vectory::getBytesPerElement() > 1) {
        $append = new \Yay\Ast('__context_Multibyte');
        $append->push(new \Yay\Ast());
        $ast->append($append);
    }
} >> {
    public function testThrowsIfIndexRetrievedOfInvalidType(): void
    {
        $this->expectException(\TypeError::class);
        (self::getInstance())['foo'];
    }
    
    public function testThrowsIfIndexRetrievedOfEmptyContainer(): void
    {
        $this->expectException(\OutOfRangeException::class);
        (self::getInstance())[0];
    }
    
    public function testThrowsIfIndexRetrievedIsNegative(): void
    {
        $this->expectException(\OutOfRangeException::class);
        $vector = self::getInstance();
        $vector[0] = $[DefaultValue];
        $vector[-1];
    }
    
    public function testThrowsIfIndexSetOfInvalidType(): void
    {
        $this->expectException(\TypeError::class);
        $vector = self::getInstance();
        $vector['foo'] = $[DefaultValue];
    }
    
    public function testThrowsIfIndexSetIsNegative(): void
    {
        $this->expectException(\OutOfRangeException::class);
        $vector = self::getInstance();
        $vector[-1] = $[DefaultValue];
    }
    
    public function testThrowsIfValueSetOfInvalidType(): void
    {
        $this->expectException(\TypeError::class);
        $vector = self::getInstance();
        $vector[0] = self::INVALID_VALUE;
    }
    
    $$(expand(
        $<HasMinimumMaximum>{
            public function testThrowsIfValueSetIsLowerThanMinimum(): void
            {
                $this->expectException(\OutOfRangeException::class);
                $vector = self::getInstance();
                $vector[0] = $[MinimumValue] - 1;
            }
            
            public function testThrowsIfValueSetIsGreaterThanMaximum(): void
            {
                $this->expectException(\OutOfRangeException::class);
                $vector = self::getInstance();
                $vector[0] = $[MaximumValue] + 1;
            }
        }
        
        $<String>{
            $(__context_Multibyte ? {
                public function testThrowsIfValueSetIsTooShort(): void
                {
                    $this->expectException(\LengthException::class);
                    $vector = self::getInstance();
                    $vector[0] = \substr($[DefaultValue], 0, -1);
                }
            })
                
            public function testThrowsIfValueSetIsTooLong(): void
            {
                $this->expectException(\LengthException::class);
                $vector = self::getInstance();
                $vector[0] = $[DefaultValue] . "\x0";
            }
        }
    ))
    
    public function testArrayAccess(): void
    {
        $vector = self::getInstance();
        self::assertFalse(isset($vector[0]));

        $vector[0] = $[DefaultValue];
        self::assertTrue(isset($vector[0]));
        self::assertFalse(isset($vector[1]));
        self::assertSame($[DefaultValue], $vector[0]);
        
        $value = self::getRandomValue();
        $vector[2] = $value;
        self::assertTrue(isset($vector[0]));
        self::assertTrue(isset($vector[1]));
        self::assertTrue(isset($vector[2]));
        self::assertFalse(isset($vector[3]));
        self::assertSame($[DefaultValue], $vector[0]);
        self::assertSame($[DefaultValue], $vector[1]);
        self::assertSame($value, $vector[2]);
        
        do {
            $otherValue = self::getRandomValue();
        } while ($value === $otherValue);
        $vector[2] = $otherValue;
        self::assertTrue(isset($vector[0]));
        self::assertTrue(isset($vector[1]));
        self::assertTrue(isset($vector[2]));
        self::assertFalse(isset($vector[3]));
        self::assertSame($[DefaultValue], $vector[0]);
        self::assertSame($[DefaultValue], $vector[1]);
        self::assertSame($otherValue, $vector[2]);
        
        $vector[0] = $value;
        unset($vector[1]);
        self::assertTrue(isset($vector[0]));
        self::assertTrue(isset($vector[1]));
        self::assertFalse(isset($vector[2]));
        self::assertSame($value, $vector[0]);
        self::assertSame($otherValue, $vector[1]);
        
        $vector[17] = $value;
        self::assertSame($[DefaultValue], $vector[15]);
        self::assertSame($[DefaultValue], $vector[16]);
        self::assertSame($value, $vector[17]);
        unset($vector[3]);
        unset($vector[2]);
    }
    
    /**
     * @depends testArrayAccess
     */
    public function testOffsetSetWithNullIndex(): void
    {
        $vector = self::getInstance();
        $value0 = self::getRandomValue();
        $vector[] = $value0;
        
        $value2 = self::getRandomValue();
        $vector[2] = $value2;
        
        $value3 = self::getRandomValue();
        $vector[] = $value3;
        
        self::assertTrue(isset($vector[0]));
        self::assertTrue(isset($vector[1]));
        self::assertTrue(isset($vector[2]));
        self::assertTrue(isset($vector[3]));
        self::assertFalse(isset($vector[4]));
        self::assertSame($value0, $vector[0]);
        self::assertSame($[DefaultValue], $vector[1]);
        self::assertSame($value2, $vector[2]);
        self::assertSame($value3, $vector[3]);
    }

    /**
     * @depends testArrayAccess
     */
    public function testOffsetSetWithNullValue(): void
    {
        $$(expand(
            $<!Nullable>{
                $this->expectException(\TypeError::class);
            }
        ))

        $vector = self::getInstance();
        $vector[1] = null;

        $$(expand(
            $<Nullable>{
                self::assertTrue(isset($vector[0]));
                self::assertTrue(isset($vector[1]));
                self::assertFalse(isset($vector[2]));
                self::assertSame($[DefaultValue], $vector[0]);
                self::assertNull($vector[1]);
            }
        ))
    }

    $$(expand(
        $<HasMinimumMaximum>{
            public static function extremumProvider(): \Generator
            {
                yield from [
                    [$[MinimumValue]],
                    [$[MinimumValue] + 1],
                    [$[MaximumValue] - 1],
                    [$[MaximumValue]],
                ];
            }
            
            /**
             * @dataProvider extremumProvider
             * @depends testArrayAccess
             */
            public function testOffsetSetWithExtremum(int $extremum): void
            {
                $vector = self::getInstance();
                $vector[0] = $extremum;
                self::assertSame($extremum, $vector[0]);
            }
        }
    ))
}