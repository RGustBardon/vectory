<?php

$(macro :unsafe) {
    __array_access_methods_test()
    $(_() as __context_Multibyte)
} >> function (\Yay\Ast $ast, \Yay\TokenStream $ts, \Yay\Index $start, \Yay\Index $end, \Yay\Engine $engine) {
    if (Vectory::isString() && Vectory::getBytesPerElement() > 1) {
        $append = new \Yay\Ast('__context_Multibyte');
        $append->push(new \Yay\Ast());
        $ast->append($append);
    }
} >> {
    public function testThrowsIfIndexOfInvalidType(): void
    {
        $this->expectException(\TypeError::class);
        (self::getInstance())[false];
    }
    
    public function testThrowsIfIndexOfEmptyContainer(): void
    {
        $this->expectException(\OutOfRangeException::class);
        (self::getInstance())[0];
    }
    
    public function testThrowsIfIndexIsNegative(): void
    {
        $this->expectException(\OutOfRangeException::class);
        $vector = self::getInstance();
        $vector[0] = $[DefaultValue];
        $vector[-1];
    }
    
    public function testThrowsIfIndexIsOutOfRange(): void
    {
        $this->expectException(\OutOfRangeException::class);
        $vector = self::getInstance();
        $vector[0] = $[DefaultValue];
        $vector[1];
    }
    
    public function testThrowsIfValueOfInvalidType(): void
    {
        $this->expectException(\TypeError::class);
        $vector = self::getInstance();
        $vector[0] = self::INVALID_VALUE;
    }
    
    $$(expand(
        $<HasMinimumMaximum>{
            public function testThrowsIfValueIsLowerThanMinimum(): void
            {
                $this->expectException(\OutOfRangeException::class);
                $vector = self::getInstance();
                $vector[0] = $[MinimumValue] - 1;
            }
            
            public function testThrowsIfValueIsGreaterThanMaximum(): void
            {
                $this->expectException(\OutOfRangeException::class);
                $vector = self::getInstance();
                $vector[0] = $[MaximumValue] + 1;
            }
        }
        
        $<String>{
            $(__context_Multibyte ? {
                public function testThrowsIfValueIsTooShort(): void
                {
                    $this->expectException(\LengthException::class);
                    $vector = self::getInstance();
                    $vector[0] = \substr($[DefaultValue], 0, -1);
                }
            })
                
            public function testThrowsIfValueIsTooLong(): void
            {
                $this->expectException(\LengthException::class);
                $vector = self::getInstance();
                $vector[0] = $[DefaultValue] . "\x0";
            }
        }
    ))
}