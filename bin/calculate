#!/usr/bin/env php
<?php

declare(strict_types=1);

/*
 * This file is part of the Vectory package.
 *
 * (c) Robert Gust-Bardon <robert@gust-bardon.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

\error_reporting(\E_ALL);

\gc_disable();

if (4 !== $GLOBALS['argc'] || \array_intersect(['-h', '--help'], $GLOBALS['argv'])) {
    \fprintf(
        STDERR,
        'usage: %s [data-structure-id] [serialized-value] [how-many]'.\PHP_EOL,
        \basename(__FILE__)
    );
    exit(2);
}

(static function (string $dataStructureId, string $jsonValue, string $howMany): void {
    if (!\preg_match('~^(0|[1-9][0-9]*)$~', $howMany)) {
        \fwrite(STDERR, 'Invalid number of elements.'.\PHP_EOL);
        exit(1);
    }
    $howMany = (int) $howMany;

    $value = \json_decode($jsonValue, true);
    if (\JSON_ERROR_NONE !== \json_last_error()) {
        \fwrite(STDERR, 'Invalid JSON value.'.\PHP_EOL);
        exit(1);
    }
    
    switch ($dataStructureId) {
        case 'array':
            $dataStructure = [];
            break;
    
        case \Ds\Deque::class:
            $dataStructure = new \Ds\Deque();
            break;
            
        case \Ds\Vector::class:
            $dataStructure = new \Ds\Vector();
            break;
        
        case \SplFixedArray::class:
            $dataStructure = new \SplFixedArray();
            break;
            
        default:
            $path = __DIR__.'/../dist/'.$dataStructureId.'.php';
            if (!\preg_match('~^[\\\\A-z0-9]+$~', $dataStructureId) || !\file_exists($path)) {
                \fwrite(STDERR, 'Invalid data structure id.'.\PHP_EOL);
                exit(1);
            }
            
            require_once __DIR__.'/../dist/VectorInterface.php';
            require_once __DIR__.'/../dist/'.$dataStructureId.'.php';
            $class = '\\Vectory\\'.$dataStructureId;
            $dataStructure = new $class();
            break;
    }
    
    for ($i = 0; $i <= 5; ++$i) {
        if (5 === $i) {
            $memoryUsageAfterWarmup = \memory_get_usage(true);
            $elementCountAfterWarmup = \count($dataStructure);
        }
        $memoryUsageBeforeLoop = \memory_get_usage(true);
        while (\memory_get_usage(true) === $memoryUsageBeforeLoop) {
            switch ($dataStructureId) {
                case 'array':
                    $dataStructure[] = $value;
                    break;
                    
                case \Ds\Deque::class;
                    $dataStructure->push($value);
                    break;
                
                case \Ds\Vector::class:
                    $dataStructure->push($value);
                    break;
                    
                case \SplFixedArray::class:
                    $dataStructure->setSize(\count($dataStructure) + 1);
                    $dataStructure[\count($dataStructure) - 1] = $value;
                    break;
                    
                default:
                    $dataStructure[] = $value;
                    break;
            }
        }
    }
    $memoryUsageAfterBenchmark = \memory_get_usage(true);
    $elementCountAfterBenchmark = \count($dataStructure);
    $result = ($howMany * ($memoryUsageAfterBenchmark - $memoryUsageAfterWarmup) /
        ($elementCountAfterBenchmark - $elementCountAfterWarmup));
    
    echo $result >= 1 ? \round($result, 0) : $result, \PHP_EOL;
})(
    $GLOBALS['argv'][1],
    $GLOBALS['argv'][2],
    $GLOBALS['argv'][3]
);