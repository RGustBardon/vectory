#!/usr/bin/env php
<?php

declare(strict_types=1);

/*
 * This file is part of the Vectory package.
 *
 * (c) Robert Gust-Bardon <robert@gust-bardon.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

\error_reporting(\E_ALL);

\gc_disable();

\ini_set('memory_limit', '-1');

if (4 !== $GLOBALS['argc'] || \array_intersect(['-h', '--help'], $GLOBALS['argv'])) {
    \fprintf(
        STDERR,
        'usage: %s [data-structure-id] [benchmark-id] [how-many]'.\PHP_EOL,
        \basename(__FILE__)
    );
    exit(2);
}

$calculate = static function (string $dataStructureId, string $benchmark, string $howMany): void {
    if (!\preg_match('~^(0|[1-9][0-9]*)$~', $howMany)) {
        \fwrite(STDERR, 'Invalid number of elements.'.\PHP_EOL);
        exit(1);
    }
    $howMany = (int) $howMany;

    $path = __DIR__.'/../tests/PhpBench/'.$benchmark.'.php';
    if (!\preg_match('~^[\\\\A-z0-9]+$~', $benchmark) || !\file_exists($path)) {
        \fwrite(STDERR, 'Invalid benchmark.'.\PHP_EOL);
        exit(1);
    }

    require_once __DIR__.'/../Tests/PhpBench/'.$benchmark.'.php';
    $benchmark = '\\Vectory\\Tests\\PhpBench\\'.$benchmark;
    
    switch ($dataStructureId) {
        case 'array':
            $dataStructure = [];
            break;
    
        case \Ds\Deque::class:
            $dataStructure = new \Ds\Deque();
            break;
            
        case \Ds\Vector::class:
            $dataStructure = new \Ds\Vector();
            break;
        
        case \SplFixedArray::class:
            $dataStructure = new \SplFixedArray();
            break;
            
        default:
            $path = __DIR__.'/../dist/'.$dataStructureId.'.php';
            if (!\preg_match('~^[\\\\A-z0-9]+$~', $dataStructureId) || !\file_exists($path)) {
                \fwrite(STDERR, 'Invalid data structure id.'.\PHP_EOL);
                exit(1);
            }
            
            require_once __DIR__.'/../dist/VectorInterface.php';
            require_once __DIR__.'/../dist/'.$dataStructureId.'.php';
            $class = '\\Vectory\\'.$dataStructureId;
            $dataStructure = new $class();
            break;
    }
    
    \mt_srand(0);
    $memoryAllocationGroups = [];
    $elementCountDeltaBeforeLoop = 0;
    $memoryUsageDeltaBeforeLoop = 0;
    $maximumMemoryUsageDelta = 0;
    
    while (true) {
        $elementCountBeforeLoop = \count($dataStructure);
        $memoryUsageBeforeLoop = \memory_get_usage();
        
        while (\memory_get_usage() === $memoryUsageBeforeLoop) {
            $value = $benchmark::getRandomValue();
            switch ($dataStructureId) {
                case 'array':
                    $dataStructure[] = $value;
                    break;
                    
                case \Ds\Deque::class;
                $dataStructure->push($value);
                break;
                
                case \Ds\Vector::class:
                    $dataStructure->push($value);
                    break;
                    
                case \SplFixedArray::class:
                    $dataStructure->setSize(\count($dataStructure) + 1);
                    $dataStructure[\count($dataStructure) - 1] = $value;
                    break;
                    
                default:
                    $dataStructure[] = $value;
                    break;
            }
        }

        $elementCountAfterLoop = \count($dataStructure);
        $memoryUsageAfterLoop = \memory_get_usage();
        
        $elementCountDeltaAfterLoop = $elementCountAfterLoop - $elementCountBeforeLoop;
        $memoryUsageDeltaAfterLoop = $memoryUsageAfterLoop - $memoryUsageBeforeLoop;
        
        if ($memoryUsageDeltaAfterLoop >= $maximumMemoryUsageDelta) {
            $maximumMemoryUsageDelta = $memoryUsageDeltaAfterLoop;
            $memoryAllocationGroups[] = [$elementCountDeltaAfterLoop, $memoryUsageDeltaAfterLoop];
        } else {
            $index = \count($memoryAllocationGroups) - 1;
            $memoryAllocationGroups[$index][0] += $elementCountDeltaAfterLoop;
            $memoryAllocationGroups[$index][1] += $memoryUsageDeltaAfterLoop;
        }
        $memoryUsageBeforeLoop = $memoryUsageAfterLoop;
        $elementCountBeforeLoop = $elementCountAfterLoop;
        $memoryUsageDeltaBeforeLoop = $memoryUsageDeltaAfterLoop;

        if ($memoryUsageAfterLoop >= 512 * 1024 * 1024 || $elementCountAfterLoop >= 10000000) {
            break;
        }
    }
    
    $bytesPerElement =
        \array_sum(\array_column($memoryAllocationGroups, 1)) /
            \array_sum(\array_column($memoryAllocationGroups, 0));
    
    echo \number_format($bytesPerElement * $howMany, 3, '.', ''), \PHP_EOL;
};

$calculate(...\array_slice($GLOBALS['argv'], 1));